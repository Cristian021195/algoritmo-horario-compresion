[
    [
        {
            "K":1,
            "A":"exprebus-38-sabados-ab",
            "Z":11,            
            "B":"11-12-23",
            "C":["tucuman","famailla","monteros","concepcion","aguilares","santa ana","alberdi","la cocha","los pizarros","rio huacra","expreso"],            
        },
        {
            "K":2,
            "A":"exprebus-38-sabados-ab",
            "D":[1800,-300,3900,3600,1800,2400,3000,-300,3900],
            "E":"[[1,[3,4],[\"06:50\",\"07:15\"]],[2,[0,1,2],[\"06:00\",\"06:25\",\"06:45\"]],[6,[6,7],[\"10:40\",\"11:10\"]]]",
            "F":"[[0,[3,5,9],[\"06:30:00\",\"08:00:00\",\"10:30:00\"]]]"
        },
        {
            "K":3,
            "A":"exprebus-38-sabados-ab",            
            "G":[{"t":4200,"c":4},{"t":1200,"c":5},{"t":1200,"c":7},{"t":1500,"c":8},{"t":900,"c":9}],
            "H":[{"c":0,"r":[[0,1]]},{"c":1,"r":[[0,1],[3,3],[9]]},{"c":2,"r":[[0,1],[3,3],[9]]},{"c":3,"r":[[0,0],[3,3],[9]]},{"c":4,"r":[[0]]},{"c":5,"r":[[0,2],[4,8],[10]]},{"c":6,"r":[[0,5],[7,10]]},{"c":7,"r":[[0,5],[7,8],[10]]},{"c":8,"r":[[0,8],[10]]},{"c":9,"r":[[0,8],[10]]},{"c":10,"r":[]}]
        }

    ]
]


/*  Estructura beta: v1.0.0

    GLOSARIO: se lo usa para orientarnos en la descompresion / compresion
    A: nombre del horario, empresa-ruta-dias-sentido
    B: vigencia dd-mm-aaaa (dejarlo en dd-mm-aa)
    C: listado de cuidades, cabecera de tabla + condicion expreso
    D: arreglo de frecuencias verticales, sirve para desarrollar E
    E: listado de celdas con su ubicacion y tiempo, el cual luego se calculará todo hacia abajo con la frecuencia vertical D    
    F: listado de filas , con su ubicacion y tiempo de partida por el cual se calculará con la frec horizontal, los horarios hacia derecha    
    G: 
    H: rango de celdas vacias, para al final poner las vacias
    Z: numero de filas, para el numero de columnas lo calculamos con el listado de ciudades

    al final: podriamos hacer un JSON.stringify del objeto, y si supera n cantidad de caractares fragmentarlo en 2 o 3 QR pero 
    seria otro algoritmo, indicando un hash de compatibilidad para que no se escaneen codigos QR invalidos de otras cosas

    RECORDAR: una cosa es todo el trabajo para realizar la compresion, otro la descompresion, NO MEZCLAR. primero se busca tener la estructura de arriba.

    POSIBLES COMPRESIONES EXTRAS.
    - se puede suprimir de C la ultima columna, no es tan probable, pero puede pasar.
    - se puede suprimir f o c de E, habiando ordenado previamente dicho arreglo
    - se puede reemplazar hh:mm por hhmm de E y G pero es poco probable.
    - se puede comprimir J dividiendo por 1000
    - se puede suprimir c de K habiendo ordenado previamente el arreglo (que parece ya estar ordenado), dejando solo un arreglo de arreglos. analisis largo
    

    Ejemplo de compresion campo E
        {"f":1,"c":3,"t":"06:50"},{"f":1,"c":4,"t":"07:15"} => [1,[3,4],['06:50', '07:15']]

    Ejemplo de compresion campo G
        [{"f":3,"c":0, "t":"06:30"},{"f":5,"c":0,"t":"08:00"},{"f":9,"c":0,"t":"10:30"}] => [0,[3,5,9],["06:30","08:00","10:30"]]


    

    CAMPOS RETIRADOS:
        "H":[4, 5, 7, 8, 9],
        "I":[1, 2, 3, 6],
        "J":[48600000, 52800000, 54000000, 55200000, 56700000, 57600000],
    G: listado de celdas con su frecuencia step y columna a la que pertenecen
    H: time pos, la posicion en columnas de aquellas celdas que tienen como dato "hh:mm"
    I: zero pos, la posicion en columnas de aquellas celdas que tienen como dato 0
    J: timearr, arreglo de frecuencias horizontales ya comprimido, se usa en el algoritmo con time pos

    - el JSON se separaria en dos partes, desde Z hasta F y desde G hasta H
        
*/